## 1 Creating Class Component

-------------------------------------------------- import { Component } from 'react'
For classes to have access to props
=> class AnyName extends Component {}

- Implemented
  => "User.js" (Created a class "extends Component" to have access to "this.props")

/////////////////////////////////////////////////////////////////////////////////////

## 2 Working with State Events

- Implemented
  => "Users.js" (Using "constructor()" to create "State" => (Must be named "state", and has to be an "{Object}") )

-------------------------------------------------- this.setState({})
(Always returns a object)
Provided from the imported Component (To change "state" values from the constructor)

/////////////////////////////////////////////////////////////////////////////////////

## 3 LifeCicle of Class Based Components

- Created
  => "UserFinder.js" (Contains User Data and Functionality for the input Search)

--------------------------------------- componentDidMount()
Called once component mounted (evaluated & rendered)
Equivalent to
=> useEffect(..., [])

--------------------------------------- componentDidUpdate()
Called once component updated (evaluated & rendered)
Equivalent to
=> useEffect(..., [someValue])

--------------------------------------- componentWillUnmount()
Called right before component is unmounted (removed from DOM)
Equivalent to
=> useEffect(() => {return () => {...}}, [])

/////////////////////////////////////////////////////////////////////////////////////

## 4 Lifecycle Methods in Action

- Implemented
  => "UserFinder.js" - "componentDidMount()", "componentDidUpdate()"
  => "User.js" - "componentWillUnmount()"

/////////////////////////////////////////////////////////////////////////////////////

## 5 Using Context in Class Based Components

1). import CompName from 'componentLocation'

2). ------------------------------------- static contextType = ImportedComponentName
=> Call inside the "class"
=> "class" will have access to the Context as "this.context.dataName"

- Implemented
  => "UserFinder.js" ()

/////////////////////////////////////////////////////////////////////////////////////

## 6 Error handling with Class Based Component

----------------------------------------- componentDidCatch() {}
Any class component that has this Method it becomes A error boundary

- Implemented
  => "ErrorBoundary.js" (Created a class component for error handling, with componentDidCatch())
  => "UserFinder.js" (Added error handling component in the JSX)

******\*\*******\*\*\*******\*\******* Important ******\*\*******\*\*\*\*******\*\*******
=> Error Bundaries only works on Class Based Components
=> If a Class component contains "componentDidCatch()" is automatically a ErrorBundarie
